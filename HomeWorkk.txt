Simple Queue -ni  template etmek


//template stack 

/*#include <iostream>
using namespace std;
#include <cassert>
#define BOLDMAGENTA "\033[1m\033[35m"
template <typename T>
class Stack {
	T* _arr;
	int _top; 
	int _max;  
public:   
	Stack(int max) {
		if (max > 0 && max < 101)
			_max = max;
		_arr = new T[_max];  
		_top = -1; 

	}
	
	T peek() { 
		if (IsEmpty())
			assert(!"Stack is eptyyy");
		return _arr[_top]; 

	}
	bool IsFull() {
		return _top== _max;
	}
	bool IsEmpty() {
		return _top == -1; 
	}

	
	void push(T item) {

		if (IsFull())
			assert(!"Stack is full!");
		_top++;
		_arr[_top] = item; 

	}

	void Print() {
		cout << "[";
		for (size_t i = 0; i <=_top; i++)
		{
			cout << _arr[i];
			if (i != _top)
				cout << ", ";
		}
		cout << "]" << endl;
	}

	template <typename T>
	friend void  operator >> (istream& cin, Stack<T> s1); 

	template<typename T>
	friend ostream& operator <<(ostream& p, Stack <T> other);
	~Stack() {
		if (_arr != nullptr) delete[] _arr;
		cout << BOLDMAGENTA << endl;
	}
};

template<typename T> 
ostream& operator <<(ostream& cout, Stack <T> other) {
	cout << "[";
	for (size_t i = 0; i <= other._top; i++)
	{
		cout << other._arr[i];
		if (i != other._top)
			cout << ", ";
	}
	cout << "]" << endl;

	return cout;
} 
 
int  main() 
{ 
	Stack<int >  s1(10); 
	s1.push(1); 
	s1.push(1);  
	s1.push(1); 
	s1.push(1); 

	s1.push(1); 

	s1.Print();
	  

	  
}*/ 

#include <iostream>
using namespace std;
#include <cassert>
#define BOLDMAGENTA "\033[1m\033[35m"
template <typename T>
class quee {
	T* _arr;
	int _front;
	int _rear;
	int _max;
public:
	quee(int max) {
		if (max > 0 && max < 100)
			_max = max;
		else
			assert(!"Wrong size");
		_front = -1;  
		_rear = -1; 
		_arr = new T[_max]; 
	}

	bool IsEmpty() {
		return _rear == -1;
			 

	}

	bool IsFull() {
		
		return _rear == _max - 1;
	}

	void Enque(T item) {
		if (IsFull())
			assert(!"Quee is fulll!");
		if (_front == -1)
			_front = 0;
		_rear++;
		_arr[_rear] = item;

	}
	void Deque() {
		if (IsEmpty())
			assert(!"Quee is boss");
		if (_front == _rear) {
			_front = -1;
			_rear = -1;
			return;
		}
		_front++; 

	}
	T Peek()  
	{
		if (IsEmpty())
			assert(!"Qeueu is Empty...");
		 
		return _arr[_front];  
	} 

	int size() {
		if (IsEmpty())
			return 0;

		return _rear - _front + 1; 

	}

	void Print()
	{
		if (IsEmpty()) 
		{
			cout << "[]" << endl;
			return; 
		} 

		cout << "["; 
		for (size_t i = _front; i <= _rear; i++)
		{
			cout << _arr[i];
			if (i != _rear)
				cout << ", ";
		}
		cout << "]" << endl; 
	}
	template<typename T>
	friend ostream& operator <<(ostream& cout, quee <T>&a);
	~quee() {
		if (_arr != nullptr) delete[] _arr;

	}
};

template<typename T>
 
ostream& operator <<(ostream& cout, quee <T>&a) {
	if (a.IsEmpty())
	{
		cout << "[]" << endl;
		return cout;
	} 

	cout << "[";
	for (size_t i = a._front; i <= a._rear; i++)
	{
		cout << a._arr[i];
		if (i != a._rear)
			cout << ", ";
	}
	cout << "]" << endl;
	return cout;
}
int main() {
	quee<int> q1(5);
	q1.Enque(10);
	q1.Enque(1);
	q1.Enque(1);
	q1.Enque(1);
	q1.Deque();
	cout << q1.Peek();

}